name: Unified Workflow

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"HobbyHub-Microservices_HobbyService" /o:"hobbyhub-microservices" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: sonarcloud
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
      - name: Build the Docker image
        run: |
          REPO_NAME=$(basename "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME=${{ secrets.DOCKER_USER }}/$REPO_NAME
          TAG=latest
          docker build . --file Dockerfile --tag $IMAGE_NAME:$TAG
          echo "IMAGE_NAME=$IMAGE_NAME:$TAG" >> $GITHUB_ENV
      - name: Push the Docker image to Docker Hub
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME }}
          docker push $IMAGE_NAME

  owasp:
    name: OWASP ZAP Scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: '${{ secrets.DOCKER_USER }}/hobbyhub:latest'
          target: 'https://www.zaproxy.org'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  integration_test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout Service Repository
        uses: actions/checkout@v4
      - name: Build Service
        run: |
          dotnet restore
          dotnet build
      - name: Start Docker
        run: sudo service docker start
      - name: Checkout IntegrationTest Repository
        uses: actions/checkout@v4
        with:
          repository: HobbyHub-Microservices/IntegrationTest
      - name: Run xUnit Integration Tests
        run: dotnet test --logger "console;verbosity=detailed"
